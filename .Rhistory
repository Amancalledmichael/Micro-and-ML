seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 0)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 1)
=======
=======
>>>>>>> Stashed changes
>>>>>>> Stashed changes
library(tidyverse)
library(stargazer)
library(rpart)
library(rpart.plot)
#read the data
health_raw <- read_csv("health.csv")
#present first 6 rows of health data
health_raw %>% head()
dummies <- c("suppins", "female","white", "hisp",  "marry", "northe" ,
"mwest", "south", "msa","phylim","actlim","injury","priolist", "hvgg")
health <- health_raw
health[, dummies] <- lapply(health[,dummies], factor)
# function to add interaction term between all variables of a df except the dep_var
add_inter_terms <- function(df, dep_var, dummies = NULL){
vars <- colnames(df)[! colnames(df) %in% dep_var]
for (i in vars) {
for (j in vars) {
if (i != j ) {
df[paste0(i, "X", j)] <- df[i] * df[j]
if (i %in% dummies && j %in% dummies) {
df[[paste0(i, "X", j)]] <- factor(df[[paste0(i, "X", j)]])
}
}
}
}
df
}
# function to add squared terms to df for specified vars
add_squared_terms <- function(df, vars) {
for (i in vars) {
df[paste0(i, "X", i)] <- df[i] * df[i]
}
df
}
# variables to be squared
continuous_vars <- c("income", "educyr", "age", "famsze", "totchr")
# extend dataframe
health_extend <- add_inter_terms(health_raw, c("ltotexp", "suppins"), dummies = dummies)
health_extend <- add_squared_terms(health_extend, continuous_vars)
health_extend[,dummies] <- lapply(health_extend[,dummies], factor)
View(health_extend)
# function to add interaction term between all variables of a df except the dep_var
add_inter_terms <- function(df, dep_var, dummies = NULL){
vars <- colnames(df)[! colnames(df) %in% dep_var]
for (i in vars) {
for (j in vars) {
if (i < j ) {
df[paste0(i, "X", j)] <- df[i] * df[j]
if (i %in% dummies && j %in% dummies) {
df[[paste0(i, "X", j)]] <- factor(df[[paste0(i, "X", j)]])
}
}
}
}
df
}
# extend dataframe
health_extend <- add_inter_terms(health_raw, c("ltotexp", "suppins"), dummies = dummies)
health_extend <- add_squared_terms(health_extend, continuous_vars)
health[, continuous_vars] <- scale(health[, continuous_vars])
health %>% head()
scale_all_but <- function(df, but) {
for (var in colnames(df)[! colnames(df) %in% but]){
if (class(df[[var]]) == "numeric") {
df[var] <- scale(df[var])
}
}
df
}
health_extend <- scale_all_but(health_extend, c("ltotexp", "suppins"))
health_extend %>% head()
summary(health_extend$age)
sd(health_extend$age)
OLS <- lm(ltotexp ~ ., data = health)
stargazer(OLS, type = "text", ci = TRUE)
health <- scale_all_but(health, c("ltotexp", "suppins"))
OLS <- lm(ltotexp ~ ., data = health)
stargazer(OLS, type = "text", ci = TRUE)
install.packages("glmnet")
# install.packages("glmnet")
library(glmnet)
View(health_extend)
library(tidyverse)
library(stargazer)
library(rpart)
library(rpart.plot)
#read the data
health_raw <- read_csv("health.csv")
#present first 6 rows of health data
health_raw %>% head()
dummies <- c("suppins", "female","white", "hisp",  "marry", "northe" ,
"mwest", "south", "msa","phylim","actlim","injury","priolist", "hvgg")
health <- health_raw
health[, dummies] <- lapply(health[,dummies], factor)
# function to add interaction term between all variables of a df except the dep_var
add_inter_terms <- function(df, dep_var, dummies = NULL){
vars <- colnames(df)[! colnames(df) %in% dep_var]
for (i in vars) {
for (j in vars) {
if (i < j ) {
df[paste0(i, "X", j)] <- df[i] * df[j]
if (i %in% dummies && j %in% dummies) {
df[[paste0(i, "X", j)]] <- factor(df[[paste0(i, "X", j)]])
}
}
}
}
df
}
# function to add squared terms to df for specified vars
add_squared_terms <- function(df, vars) {
for (i in vars) {
df[paste0(i, "X", i)] <- df[i] * df[i]
}
df
}
# variables to be squared
continuous_vars <- c("income", "educyr", "age", "famsze", "totchr")
# extend dataframe
health_extend <- add_inter_terms(health_raw, c("ltotexp", "suppins"), dummies = dummies)
health_extend <- add_squared_terms(health_extend, continuous_vars)
health_extend[,dummies] <- lapply(health_extend[,dummies], factor)
health[, continuous_vars] <- scale(health[, continuous_vars])
health %>% head()
scale_all_but <- function(df, but) {
for (var in colnames(df)[! colnames(df) %in% but]){
if (class(df[[var]]) == "numeric") {
df[var] <- scale(df[var])
}
}
df
}
health_extend <- scale_all_but(health_extend, c("ltotexp", "suppins"))
health <- scale_all_but(health, c("ltotexp", "suppins"))
health_extend %>% head()
OLS <- lm(ltotexp ~ ., data = health)
stargazer(OLS, type = "text", ci = TRUE)
cv_f1 <- cv.glmnet(x = health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")],
y = health_extend$ltotexp, alpha  = 1)
# install.packages("glmnet")
library(glmnet)
# install.packages("glmnet")
library(glmnet)
cv_f1 <- cv.glmnet(x = health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")],
y = health_extend$ltotexp, alpha  = 1)
health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")]
cv_f1 <- cv.glmnet(x = a.matrix(health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")]),
y = as.matrix(health_extend$ltotexp), alpha  = 1)
cv_f1 <- cv.glmnet(x = as.matrix(health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")]),
y = as.matrix(health_extend$ltotexp), alpha  = 1)
cv_f1 <- cv.glmnet(x = as.matrix(completes.cases(health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")])),
y = as.matrix(health_extend$ltotexp), alpha  = 1)
cv_f1 <- cv.glmnet(x = as.matrix(complete.cases(health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")])),
y = as.matrix(health_extend$ltotexp), alpha  = 1)
complete.cases(health_extend[, ! names(health_extend) %in% c("ltotexp", "suppins")])
cv_f1 <- cv.glmnet(x = as.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")])),
y = as.matrix(health_extend[complete.cases(health_extend)], "ltotexp"), alpha  = 1)
# dataframes as matrices
x <- as.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
View(x)
ltotexp <- as.matrix(health_extend[complete.cases(health_extend)], "ltotexp")
ltotexp <- as.vector(health_extend[complete.cases(health_extend)], "ltotexp")
health_extend[complete.cases(health_extend), "ltotexp")]
health_extend[complete.cases(health_extend), "ltotexp"]
ltotexp <- as.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
# dataframes as matrices (throw out NAs)
x <- as.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- as.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
cv_f1 <- cv.glmnet(x = x,
y = ltotexp, alpha  = 1)
View(x)
Sys.setenv(LANG = "en_US.UTF-8")
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1)
best_lambda_f1 <- cv_f1$lambda
best_lambda_f1
best_lambda_f1 <- cv_f1$lambda.min
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, k = 5)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, k = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
best_lambda_f1 <- cv_f1$lambda
best_lambda_f1
plot(cv_model)
plot(cv_f1)
plot(cv_f1, sign.lambda = -1)
plot(cv_f1)
log(0.2)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5)
best_lambda_f2 <- cv_f2$lambda.min
best_lambda_f2
plot(cv_f2)
set.seed(1887)
# find best lambdas
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
# find best lambdas
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5)
best_lambda_f2 <- cv_f2$lambda.min
best_lambda_f2
plot(cv_f2)
# Estimate LASSOs
lasso_f1 <- glmnet(x = x, y = ltotexp, alpha = 1, lambda = best_lambda_f1)
summary(lasso_f1)
coef(lasso_f1)
plot(cv_f1)
best_lambda_f1
e^best_lambda_f1
exp(best_lambda_f1)
ln(best_lambda_f1)
log(best_lambda_f1)
plot(cv_f1)
log(6)
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, lambda = lambdas)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
rnorm(4)
rnorm(4)
set.seed(2)
rnorm(4)
rnorm(4)
set.seed(2)
rnorm(4)
rnorm(4)
rnorm(4)
rnorm(4)
set.seed(2)
rnorm(4)
set.seed(2)
rnorm(4)
set.seed(2)
rnorm(4)
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = T)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F, family = "gaussian")
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5, family = "binomial")
best_lambda_f2 <- cv_f2$lambda.min
best_lambda_f2
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5, family = "binomial")
best_lambda_f2 <- cv_f2$lambda.min
best_lambda_f2
plot(cv_f2)
# Estimate LASSOs
lasso_f1 <- glmnet(x = x, y = ltotexp, alpha = 1, lambda = best_lambda_f1)
coef(lasso_f1)
View(lasso_f1)
lasso_f2 <- glmnet(x = x, y = suppins, alpha = 1, lambda = best_lambda_f2)
coef(lasso_f2)
# install.packages("glmnet")
library(glmnet)
set.seed(1887)
# dataframes as matrices (throw out NAs)
x <- data.matrix((health_extend[complete.cases(health_extend), ! names(health_extend) %in% c("ltotexp", "suppins")]))
ltotexp <- data.matrix(health_extend[complete.cases(health_extend), "ltotexp"])
suppins <- data.matrix(health_extend[complete.cases(health_extend), "suppins"])
# find best lambdas
lambdas <- 10^seq(2, -3, by = -.1)
cv_f1 <- cv.glmnet(x = x, y = ltotexp, alpha  = 1, nfolds = 5, standardize = F)
best_lambda_f1 <- cv_f1$lambda.min
best_lambda_f1
plot(cv_f1)
cv_f2 <- cv.glmnet(x = x, y = suppins, alpha  = 1, nfolds = 5, family = "binomial")
best_lambda_f2 <- cv_f2$lambda.min
best_lambda_f2
plot(cv_f2)
# Estimate LASSOs
lasso_f1 <- glmnet(x = x, y = ltotexp, alpha = 1, lambda = best_lambda_f1)
coef(lasso_f1)
lasso_f2 <- glmnet(x = x, y = suppins, alpha = 1, lambda = best_lambda_f2)
coef(lasso_f2)
# predicted values from LASSO estimates
predicted_ltotexp <- predict(lasso_f1)
View(lasso_f1)
# predicted values from LASSO estimates
predicted_ltotexp <- predict(lasso_f1, newx = health_extend)
# predicted values from LASSO estimates
predicted_ltotexp <- predict(lasso_f1, newx = x)
residual_ltotexp <- ltotexp - predicted_ltotexp
predicted_suppins <- predict(lasso_f2, newx = x)
residuals_suppins <- suppins - predicted_suppins
# OLS of residuals from ltotexp on residuals from suppins
alpha_lasso <- lm(residuals_ltotexp ~ residuals_suppins)
residuals_ltotexp <- ltotexp - predicted_ltotexp
predicted_suppins <- predict(lasso_f2, newx = x)
residuals_suppins <- suppins - predicted_suppins
# OLS of residuals from ltotexp on residuals from suppins
alpha_lasso <- lm(residuals_ltotexp ~ residuals_suppins)
summary(alpha_lasso)
# OLS of residuals from ltotexp on residuals from suppins
alpha_lasso <- lm(residuals_ltotexp ~ 0 + residuals_suppins)
summary(alpha_lasso)
OLS <- lm(ltotexp ~ 0 + ., data = health)
stargazer(OLS, type = "text", ci = TRUE)
# OLS of residuals from ltotexp on residuals from suppins
alpha_lasso <- lm(residuals_ltotexp ~ residuals_suppins)
summary(alpha_lasso)
