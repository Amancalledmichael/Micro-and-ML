<<<<<<< Updated upstream
=======
<<<<<<< Updated upstream
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
View(carseats)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(12, NA))))
# View(carseats)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
# table(carseats$Sales, carseats$HighSales)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
View(carseats)
carseats$Urban <- as.factor(carseats$Urban)
carseats$Urban <- as.factor(carseats$Urban)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- ordered(carseats$ShelveLoc, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- ordered(carseats$ShelveLoc, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$ShelveLoc
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
plot.tree(seat_tree)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = T, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree = tree(HighSales ~ . - Sales ., data = seat_trn, minsize = 12)
seat_tree = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
seat_trn_pred = predict(seat_tree, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree, seat_tst, type = "class")
seat_trn_pred
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$Sales)
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
summary(seat_tree_trn)
summary(seat_tree)
str(carseats)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = F, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
=======
library(tree)
carseats_tree_unpruned <- tree(Sales ~ ., carseats)
carseats_tree_unpruned <- tree(Sales ~ ., carseats)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned)
carseats_tree_unpruned <- tree(Sales ~ ., carseats)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned, pretty = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats)
summary(carseats_tree_unpruned)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned, pretty = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned, pretty = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minbucket = 12)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned, pretty = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
summary(carseats_tree_unpruned)
plot(carseats_tree_unpruned)
text(carseats_tree_unpruned, pretty = 0)
install.packages("rpart.plot")
library(tidyverse)
library(rpart)
library(tree)
library(rpart.plot)
prp(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.2)
rpart.plot(carseats_tree_unpruned, tweak = 2)
rpart.plot(carseats_tree_unpruned, tweak = 1.5)
rpart.plot(carseats_tree_unpruned, tweak = 2)
rpart.plot(carseats_tree_unpruned, tweak = 1.5)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats <- read.csv(file = 'carseats.csv')
#1.
carseats$High <- ifelse(carseats$Sales > 8, 1, 0)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
#3.
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats <- read.csv(file = 'carseats.csv')
getwd()
carseats <- read_csv("carseats.csv")
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
#1.
carseats$High <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
carseats <- carseats %>%
select(- Sales)
seat_tree = tree(High ~ ., data = carseats, minsize = 12)
#3.
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
View(carseats)
carseats <- read_csv("carseats.csv")
#1.
carseats$High <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
carseats <- carseats %>%
select(-Sales)
View(carseats)
seat_tree = tree(High ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
seat_tree = tree(High ~ ., data = carseats)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats <- read_csv("carseats.csv")
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales >= 8, 1, 0))
seat_tree = tree(High ~ ., data = carseats)
seat_tree = tree(Sales ~ ., data = carseats)
typeof(carseats$Sales)
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales >= 8, 1, 0))
#1.
carseats$Sales <- ifelse(carseats$Sales >= 8, 1, 0)
typeof(carseats$Sales)
#1.
carseats$Sales <- ifelse(carseats$Sales >= 8, 1, 0)
typeof(carseats$Sales)
View(carseats)
carseats <- read_csv("carseats.csv")
#1.
carseats$Sales <- ifelse(carseats$Sales >= 8, 1, 0)
View(carseats)
typeof(carseats$Sales)
carseats$Sales <- as.factor(carseats$Sales)
typeof(carseats$Sales)
?tree
View(carseats)
carseats <- read_csv("carseats.csv")
carseats <- carseats %>%
mutate(Sales = case_when(Sales >= 8 ~ 1,
Sales < 8 ~ 0))
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
typeof(carseats$Sales)
seat_tree = tree(Sales ~ ., data = carseats)
carseats$Sales <- factor(carseats$Sales)
typeof(carseats$Sales)
carseats <- read_csv("carseats.csv")
carseats %>% head()
carseats <- carseats %>%
mutate(Sales = case_when(Sales >= 8 ~ 1,
Sales < 8 ~ 0))
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
typeof(carseats$Sales)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats <- read_csv("carseats.csv")
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales >= 8, 1, 0))
class(carseats$Sales)
seat_tree = tree(Sales ~ ., data = carseats)
#3.
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
seat_tree = tree(Sales ~ ., data = carseats)
#3.
plot(seat_tree)
seat_tree = tree(Sales ~ ., data = carseats)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
carseats <- read_csv("carseats.csv")
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
class(carseats$Sales)
seat_tree = tree(Sales ~ ., data = carseats)
#3.
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
View(carseats)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
seat_tree = tree(Sales ~ ., data = carseats)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
View(carseats)
carseats$Urban <- as.factor(carseats$Urban)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(Sales ~ ., data = carseats)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
summary(tree)
summary(seat_tree)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, min_bucket = 12)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minbucket = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12,minbucket = 12)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
summary(seat_tree)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minbucket = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
>>>>>>> Stashed changes
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
<<<<<<< Updated upstream
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = F, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 10)
summary(seat_tree)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = F, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = F, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc, ordered = F, levels = c("Bad", "Medium", "Good"))
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 10)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 10)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
seat_tree_cv = cv.tree(seat_tree, FUN = prune.misclass)
min_idx = which.min(seat_tree_cv$dev)
seat_tree_cv$size[min_idx]
seat_tree_cv$size[9]
seat_tree_cv$size[14]
seat_tree_cv = cv.tree(seat_tree_trn, FUN = prune.misclass)
View(seat_tree_cv)
prune.misclass(seat_tree_trn)
prune.misclass(seat_tree_trn, k = 9)
test <- prune.misclass(seat_tree_trn, k = 9)
View(test)
plot(test)
text(test)
test <- prune.misclass(seat_tree_trn, best = 9)
plot(test)
text(test)
seat_tree_cv = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
min_idx = which.min(seat_tree_cv$dev)
seat_tree_cv$size[min_idx]
View(seat_tree_cv)
plot(seat_tree_cv)
text(seat_tree_cv)
seat_tree_cv = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_cv)
text(seat_tree_cv)
# 9 nodes
seat_tree_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_cv_9)
text(seat_tree_cv_9)
plot(seat_tree_cv_9)
text(seat_tree_cv_9)
rm(list = ls())
# install.packages("tree")
library(tree)
>>>>>>> Stashed changes
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
=======
seat_tree = tree(Sales ~ ., data = carseats)
summary(seat_tree)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
summary(seat_tree)
seat_tree$frame %>% view()
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
summary(carseats_tree_unpruned)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
View(carseats)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats_tree_unpruned$variable.importance
summary(seat_tree)
seat_tree = tree(Sales ~ ., data = carseats %>% select(-`...1`), minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), usesurrogate = 0, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, usesurrogate = 0, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
summary(carseats_tree_unpruned)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
view(carseats_tree_unpruned)
View(carseats)
View(carseats_tree_unpruned)
carseats_tree_unpruned[["terms"]][[3]]
carseats_tree_unpruned[["cptable"]]
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
library(tidyverse)
library(rpart)
library(tree)
library(rpart.plot)
carseats <- read_csv("carseats.csv")
carseats %>% head()
# mutate allows you to add new variables to an existing dataframe with its own variables
# case_when is very helpful to create different new classes based on some conditions (the conditions are evaluated in order and the first true is used). Here using case_when is probably overkill though.
carseats <- carseats %>%
mutate(Sales = case_when(Sales > 8 ~ 1,
Sales <= 8 ~ 0))
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
summary(carseats_tree_unpruned)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats <- carseats %>%
mutate(Sales = case_when(Sales > 8 ~ 1,
Sales <= 8 ~ 0)) %>%
select(-`...1`)
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats %>% select(-`...1`), minsplit = 12, cp = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
carseats <- read_csv("carseats.csv")
carseats %>% head()
# mutate allows you to add new variables to an existing dataframe with its own variables
# case_when is very helpful to create different new classes based on some conditions (the conditions are evaluated in order and the first true is used). Here using case_when is probably overkill though.
carseats <- carseats %>%
mutate(Sales = case_when(Sales > 8 ~ 1,
Sales <= 8 ~ 0)) %>%
select(-`...1`)
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats$US <- as.factor(carseats$US)
carseats$Urban <- as.factor(carseats$Urban)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
View(carseats)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0)
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0, parms=list(split="information"))
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0, parms=list(split="information"))
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats_tree_unpruned <- rpart(Sales ~ ., carseats, minsplit = 12, cp = 0.01, parms=list(split="information"))
rpart.plot(carseats_tree_unpruned, tweak = 1.5, type = 5)
?rpart.plot
rpart.plot(carseats_tree_unpruned,
tweak = 1.5,
type = 5,
extra = 100)
rpart.plot(carseats_tree_unpruned,
tweak = 1.5,
type = 5,
extra = 1)
rpart.plot(carseats_tree_unpruned,
tweak = 1.5,
type = 5,
extra = 100)
rpart.plot(carseats_tree_unpruned,
tweak = 1.5,
type = 5,
extra = 101)
library(tidyverse)
library(rpart)
library(tree)
library(rpart.plot)
carseats <- read_csv("carseats.csv")
carseats %>% head()
# mutate allows you to add new variables to an existing dataframe with its own variables
# case_when is very helpful to create different new classes based on some conditions (the conditions are evaluated in order and the first true is used). Here using case_when is probably overkill though.
carseats <- carseats %>%
mutate(Sales = case_when(Sales > 8 ~ 1,
Sales <= 8 ~ 0)) %>%
select(-`...1`)
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
carseats$US <- as.factor(carseats$US)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats,
minsplit = 12,
cp = 0,
parms = list(split = "information")) # The output depends on the impurity measure, default in rpart for classification is Gini, default in tree is information = Entropy
# plotting the classification tree made with rpart
rpart.plot(carseats_tree_unpruned,
tweak = 1.5, # we can tweak the size of the tree
type = 5, # we can change the display of the decision nodes
extra = 101) # we can change the display information of the terminal nodes
carseats <- read_csv("carseats.csv")
carseats %>% head()
# mutate allows you to add new variables to an existing dataframe with its own variables
# case_when is very helpful to create different new classes based on some conditions (the conditions are evaluated in order and the first true is used). Here using case_when is probably overkill though.
carseats <- carseats %>%
mutate(Sales = case_when(Sales > 8 ~ 1,
Sales <= 8 ~ 0)) %>%
select(-`...1`)
# if we set the variable as a factor the default of the rpart function will be class, otherwise we would have to specify it.
carseats$Sales <- as.factor(carseats$Sales)
carseats$US <- as.factor(carseats$US)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
carseats_tree_unpruned <- rpart(Sales ~ ., carseats,
minsplit = 12,
cp = 0,
parms = list(split = "information")) # The output depends on the impurity measure, default in rpart for classification is Gini, default in tree is information = Entropy
# plotting the classification tree made with rpart
rpart.plot(carseats_tree_unpruned,
tweak = 1.5, # we can tweak the size of the tree
type = 5, # we can change the display of the decision nodes
extra = 101) # we can change the display information of the terminal nodes
carseats_tree_unpruned <- rpart(Sales ~ ., carseats,
minsplit = 12,
cp = 0.01,
parms = list(split = "information")) # The output depends on the impurity measure, default in rpart for classification is Gini, default in tree is information = Entropy
# plotting the classification tree made with rpart
rpart.plot(carseats_tree_unpruned,
tweak = 1.5, # we can tweak the size of the tree
type = 5, # we can change the display of the decision nodes
extra = 101) # we can change the display information of the terminal nodes
carseats_tree_unpruned <- rpart(Sales ~ ., carseats,
minsplit = 12,
parms = list(split = "information")) # The output depends on the impurity measure, default in rpart for classification is Gini, default in tree is information = Entropy
# plotting the classification tree made with rpart
rpart.plot(carseats_tree_unpruned,
tweak = 1.5, # we can tweak the size of the tree
type = 5, # we can change the display of the decision nodes
extra = 101) # we can change the display information of the terminal nodes
carseats_tree_unpruned <- rpart(Sales ~ ., carseats,
minsplit = 12,
cp = 0,
parms = list(split = "information")) # The output depends on the impurity measure, default in rpart for classification is Gini, default in tree is information = Entropy
# plotting the classification tree made with rpart
rpart.plot(carseats_tree_unpruned,
tweak = 1.5, # we can tweak the size of the tree
type = 5, # we can change the display of the decision nodes
extra = 101) # we can change the display information of the terminal nodes
seats_tree <- tree(Sales~.,carseats
minsize = 12)
seats_tree <- tree(Sales~.,
carseats,
minsize = 12)
summary(seats_tree)
x <- summary(carseats_tree_unpruned)
summary(seats_tree)
residuals(carseats_tree_unpruned, type = "deviance")
summary(seats_tree)
residuals(carseats_tree_unpruned)
mean(residuals(carseats_tree_unpruned))
summary(seats_tree)
mean(residuals(carseats_tree_unpruned))
summary(residuals(carseats_tree_unpruned))
printcp(carseats_tree_unpruned)
summary(seats_tree)
View(seats_tree)
View(carseats_tree_unpruned)
carseats_tree_unpruned[["cptable"]]
summary(residuals(carseats_tree_unpruned))
mean(residuals(carseats_tree_unpruned))
summary(seats_tree)
residuals(carseats_tree_unpruned)
sum(residuals(carseats_tree_unpruned))
summary(seats_tree)
sum(residuals(carseats_tree_unpruned))
summary(seats_tree)
39/400
mean(residuals(carseats_tree_unpruned))
mean(residuals(carseats_tree_unpruned, type = "deviance"))
summary(seats_tree)
residuals(carseats_tree_unpruned, type = "deviance")
mean(residuals(carseats_tree_unpruned, type = "deviance"))
summary(seats_tree)
sum(residuals(carseats_tree_unpruned, type = "deviance"))
summary(seats_tree)
sum(residuals(carseats_tree_unpruned, type = "deviance"))
summary(residuals(carseats_tree_unpruned, type = "deviance"))
?residuals.rpart
?residuals.tree
?summary.tree
deviance(seats_tree)
?deviance.tree
??deviance
deviance.tree
deviance
deviance %>% view()
view(deviance)
deviance.tree
tree.deviance
deviance(carseats_tree_unpruned)
misclass.tree(seats_tree)
install.packages("ISLR")
library(ISLR)
library(tree)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
carseats <- read.csv(file = 'carseats.csv')
View(carseats)
#1.
carseats$Sales <- ifelse(carseats$Sales > 8, 1, 0)
#2.
#install.packages("tree")
library(tree)
#install.packages("ISLR")
library(ISLR)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
carseats <- read.csv(file = 'carseats.csv') %>% select(-`...1`)
carseats <- read.csv(file = 'carseats.csv') %>% select(-´...1´)
carseats <- read.csv(file = 'carseats.csv')
View(carseats)
carseats <- read.csv(file = 'carseats.csv') %>% select(-X)
View(carseats)
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
#2.
#install.packages("tree")
library(tree)
#install.packages("ISLR")
library(ISLR)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
#3.
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
carseats <- read.csv(file = 'carseats.csv') %>% select(-X)
#1.
carseats$Sales <- as.factor(ifelse(carseats$Sales > 8, 1, 0))
carseats$US <- as.factor(carseats$US)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- as.factor(carseats$ShelveLoc)
seat_tree = tree(Sales ~ ., data = carseats, minsize = 12)
>>>>>>> Stashed changes
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
<<<<<<< Updated upstream
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
# 9 nodes
seat_tree_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_cv_9)
text(seat_tree_cv_9)
# 14 nodes
seat_tree_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_cv_14)
text(seat_tree_cv_14)
summary(seat_tree_cv_14)
seat_tree_cv_14$dev
View(seat_tree_cv_14)
# 9 nodes
seat_trn_cv_9 = cv.trn(seat_trn_trn, FUN = prune.misclass, best = 9)
plot(seat_trn_cv_9)
# 9 nodes
seat_trn_cv_9 = cv.trn(seat_tree_trn, FUN = prune.misclass, best = 9)
# 9 nodes
seat_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_trn_cv_9)
text(seat_trn_cv_9)
# 14 nodes
seat_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_trn_cv_14)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv9_pred, actual = seat_tst$HighSales)
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv9_pred, actual = seat_tst$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_trn_14 = tree(seat_tree_trn, minsize = 12, nmax = 14)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
# train acc
accuracy(predicted = seat_trn_cv_pred, actual = seat_trn$HighSales)
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tst_14_pred <- predict(seat_tree_trn_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_14_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 1000)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 10)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 14)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tst_14_pred <- predict(seat_tree_trn_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_14_pred, actual = seat_tst$HighSales)
View(seat_trn_cv_14)
seat_tree_cv_9$dev
View(seat_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
seat_tree_cv_9$dev
seat_tree_trn_cv_9$dev
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9)
seat_tree_trn_cv_9$dev
seat_tree_cv_9$dev
view(prune.misclass())
View(prune.misclass())
prune.misclass()
view(prune.tree())
View(prune.tree())
method(prune.tree())
methods(prune.misclass())
View(prune.misclass)
View(prune.tree)
View(cv.tree)
sample(10, length(model.frame(seat_tree)), replace = T)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 1000)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_cv_14
summary(seat_tree_cv_9)
plot(seat_tree_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, K = 1)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
View(seat_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, K = 1000)
plot(seat_tree_trn_cv_9)
prune.misclass(seat_tree)
<<<<<<< Updated upstream
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(42)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
seat_tree
table(carseats$Sales, carseats$HighSales)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(42)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 0)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 1)
=======
=======
>>>>>>> Stashed changes
>>>>>>> Stashed changes
