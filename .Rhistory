# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_trn_pred, actual = seat_tst$HighSales)
# 9 nodes
seat_tree_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_cv_9)
text(seat_tree_cv_9)
# 14 nodes
seat_tree_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_cv_14)
text(seat_tree_cv_14)
summary(seat_tree_cv_14)
seat_tree_cv_14$dev
View(seat_tree_cv_14)
# 9 nodes
seat_trn_cv_9 = cv.trn(seat_trn_trn, FUN = prune.misclass, best = 9)
plot(seat_trn_cv_9)
# 9 nodes
seat_trn_cv_9 = cv.trn(seat_tree_trn, FUN = prune.misclass, best = 9)
# 9 nodes
seat_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_trn_cv_9)
text(seat_trn_cv_9)
# 14 nodes
seat_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_trn_cv_14)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv9_pred, actual = seat_tst$HighSales)
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv9_pred, actual = seat_tst$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_trn_14 = tree(seat_tree_trn, minsize = 12, nmax = 14)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
# train acc
accuracy(predicted = seat_trn_cv_pred, actual = seat_trn$HighSales)
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tst_14_pred <- predict(seat_tree_trn_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_14_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 1000)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 10)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 9)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tree_trn_14 <- prune.misclass(seat_tree_trn, best = 14)
seat_trn_14_pred <- predict(seat_tree_trn_14, seat_trn, type = "class")
seat_tst_14_pred <- predict(seat_tree_trn_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_14_pred, actual = seat_tst$HighSales)
View(seat_trn_cv_14)
seat_tree_cv_9$dev
View(seat_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
seat_tree_cv_9$dev
seat_tree_trn_cv_9$dev
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9)
seat_tree_trn_cv_9$dev
seat_tree_cv_9$dev
view(prune.misclass())
View(prune.misclass())
prune.misclass()
view(prune.tree())
View(prune.tree())
method(prune.tree())
methods(prune.misclass())
View(prune.misclass)
View(prune.tree)
View(cv.tree)
sample(10, length(model.frame(seat_tree)), replace = T)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14, K = 1000)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
seat_tree_cv_14
summary(seat_tree_cv_9)
plot(seat_tree_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, K = 1)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
View(seat_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass)
plot(seat_tree_trn_cv_9)
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, K = 1000)
plot(seat_tree_trn_cv_9)
prune.misclass(seat_tree)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales > 8, "Low", "High"))
# table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(42)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
seat_tree
table(carseats$Sales, carseats$HighSales)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(42)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
rm(list = ls())
# install.packages("tree")
library(tree)
# install.packages("ISLR")
library(ISLR)
carseats <- read.csv(file = 'carseats.csv', colClasses = (c("NULL", replicate(11, NA))))
# View(carseats)
carseats$HighSales <- as.factor(ifelse(carseats$Sales <= 8, "Low", "High"))
table(carseats$Sales, carseats$HighSales)
carseats$Urban <- as.factor(carseats$Urban)
carseats$ShelveLoc <- factor(carseats$ShelveLoc)
carseats$US <- as.factor(carseats$US)
seat_tree = tree(HighSales ~ . - Sales, data = carseats, minsize = 12)
plot(seat_tree)
text(seat_tree, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree")
summary(seat_tree)
dim(carseats)
set.seed(2)
seat_idx = sample(1:nrow(carseats), 200)
seat_trn = carseats[seat_idx,]
seat_tst = carseats[-seat_idx,]
seat_tree_trn = tree(HighSales ~ . - Sales, data = seat_trn, minsize = 12)
plot(seat_tree_trn)
text(seat_tree_trn, pretty = 0, cex = 0.5)
title(main = "Unpruned Classification Tree (Training)")
summary(seat_tree_trn)
seat_trn_pred = predict(seat_tree_trn, seat_trn, type = "class")
seat_tst_pred = predict(seat_tree_trn, seat_tst, type = "class")
# train confusion
table(predicted = seat_trn_pred, actual = seat_trn$HighSales)
# test confusion
table(predicted = seat_tst_pred, actual = seat_tst$HighSales)
accuracy = function(actual, predicted) {
mean(actual == predicted)
}
# train acc
accuracy(predicted = seat_trn_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# 12 nodes
seat_tree_trn_cv_12 = prune.misclass(seat_tree_trn, best = 12)
plot(seat_tree_trn_cv_12)
text(seat_tree_trn_cv_12, cex = 0.5)
seat_tree_trn_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_trn, type = "class")
seat_tree_tst_cv_12_pred <- predict(seat_tree_trn_cv_12, seat_tst, type = "class")
table(predicted = seat_tree_trn_cv_12_pred, actual = seat_trn$HighSales)
accuracy(actual = seat_trn$HighSales, predicted = seat_tree_trn_cv_12_pred)
table(predicted = seat_tree_tst_cv_12_pred, actual = seat_tst$HighSales)
accuracy(actual = seat_tst$HighSales, predicted = seat_tree_tst_cv_12_pred)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# When setting a seed in a codebox in markdown, it does so only for given codebox,
# such that we have to set a seed again for reporducibility
set.seed(420)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass)
# cross validation results: size -> terminal nodes, dev -> missclassifications, k -> cost complexity parameter
seat_tree_cv
seat_tree_cv$size
seat_tree_cv$dev
# plot the error rate
plot(seat_tree_cv$size, seat_tree_cv$dev/nrow(seat_trn), type = "b")
# 9 nodes
seat_tree_trn_cv_9 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 9)
plot(seat_tree_trn_cv_9)
text(seat_tree_trn_cv_9, cex = 0.5)
seat_trn_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_trn, type = "class")
seat_tst_cv_9_pred <- predict(seat_tree_trn_cv_9, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_9_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_9_pred, actual = seat_tst$HighSales)
# it is not possible to generate a tree with 14 nodes because of the minsize requirement we used prior
# a tree with 14 terminal nodes is not considered (like in the original example)
# the prune.missclass function defaults to using the next higher treesize (which is 17)
# 14 nodes
seat_tree_trn_cv_14 = cv.tree(seat_tree_trn, FUN = prune.misclass, best = 14)
plot(seat_tree_trn_cv_14)
text(seat_tree_trn_cv_14, cex = 0.5)
seat_trn_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_trn, type = "class")
seat_tst_cv_14_pred <- predict(seat_tree_trn_cv_14, seat_tst, type = "class")
# train acc
accuracy(predicted = seat_trn_cv_14_pred, actual = seat_trn$HighSales)
#test acc
accuracy(predicted = seat_tst_cv_14_pred, actual = seat_tst$HighSales)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 0)
# cross validation using classification error rate as indicator
seat_tree_cv <- cv.tree(seat_tree_trn, FUN = prune.misclass, k = 1)
